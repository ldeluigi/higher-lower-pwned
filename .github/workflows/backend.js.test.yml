# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: ["*"]
    paths:
      - "backend/**"
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/js/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        working-directory: backend/js
        run: npm ci
      - name: Build
        working-directory: backend/js
        run: npm build
      - name: Test
        working-directory: backend/js
        run: npm test

  publish:
    name: Publish Docker Images
    needs: [build]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      VERSION_TAG: ${{ github.sha }}
    steps:
      # checkout the repo
      - name: "Checkout GitHub Action"
        uses: actions/checkout@master

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
      
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      
      - run: docker context create aci aci-context \
            --subscription-id ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --location 'west eu'
          docker context use aci-context
          docker prune --dry-run
          docker-compose -f docker-compose.ci.yml --project-name pwned.game push
